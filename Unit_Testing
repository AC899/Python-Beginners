#AssertAlmostEqual: With rounding off at 5th decimal the comparison is done.
#AssertTrue(x): Boolean expression x is true when evaluated.
#AssetFalse(x): Boolean expression x is false when evaluated.
#Assertequal(a,b): a = b
#AssertIn(a,b): a in b
#AssertIs(a,b): a is b
#AssertIsNone(a): a is null

#Unit testing - when we want to return errors if something is not present

instrument_catalog = {
  'Marimba': 1999,
  'Kora': 499,             #Piano is missing from these variables
  'Flute': 899
}

def print_instrument_price(instrument):
    # Checkpoint 2
    if instrument in instrument_catalog:                   #if the term called as instrument in the function is in the above catalogue then print the following statement          
      print('The price of a ' + instrument + ' is ' + str(instrument_catalog[instrument]))
    # Checkpoint 3
    else:
      raise KeyError(instrument + ' is not found in instrument catalog!')       #if the word called with the function is not in instrument catalogue then return the KeyError as provided 


print_instrument_price('Marimba')
print_instrument_price('Flute')
print_instrument_price('Piano')


#unit testing 

import math
import unittest 

def square_root(l):                #function we are looking to test 
    return math.sqrt(l)

class Testclass(unittest.TestCase):
    def test_case1(var):                          #create a test function in the unit test class 
        var.assertEqual(square_root(121), 11, "Should be 11")     #var.assertEqual means func parameter (121) is equal to 11 
    def test_case2(var):
        var.assertEqual(square_root(20), 4.47213595499958, "Should be 4.47213595499958")          #the syntax we add is a guide i.e. the swrt of 20 'should be 4.4...' so if it flags up as an incorrect equal to value we know what it should be by looking at the comment 
    def test_case3(var):
        var.assertEqual(square_root(35), 5.916079783099616, "should be 5.916079783099616" )

if __name__ == "__main__":
    unittest.main()
    
    
    
