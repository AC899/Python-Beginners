# FOR LOOPS
# we will know in advance how many times the loop will need to iterate because we will be working on a collection
# In the example below our predetermined length is the length of the lists in board_games and sport_games

board_games = ["Settlers of Catan", "Carcassone", "Power Grid", "Agricola", "Scrabble"]

sport_games = ["football", "hockey", "baseball", "cricket"]

for games in board_games:
  print(games)                                   # indentation loop - the print statement is indented

for gaming in sport_games:print(gaming)        # elegant loop is all the contents on one line

for temp in range(1,9):print("This is " + str(temp))    # elegant loop counting upwards to 9

for num in range(1,20):
    print("This is a count ... starting now: " + str(num))    # indented loop counting up to 20
    
    
single_digits = [0,1,2,3,4,5,6,7,8,9]
squares = []
cubes = []

for loop in single_digits:
    squares.append(loop **2)

print(squares)

for cubed in single_digits:
    cubes.append(cubed **3)

print(cubes)



# WHILE LOOPS
# a while loop forms an indefinite iteration
#

count = 0            # indented - NUMBER WE START COUNT DOWN
while count <=3:     # NUMBER WE COUNTDOWN / COUNTUP TO (set to 0 above) is less than or equal to 3. When it gos above 4 it ceases to be true so the counter will stop.
    print(count)    # tells us to print to the console
    count +=1        # += adds the value to the variable (count) and assigns the result to the variable

counter = 0
while counter <=10: print(counter); counter +=2 # elegant loop / counting up from 0 to 10 and increasing by 2 each time


countdown = 10                             # number we are counting down from / up to is where we start variable
while countdown >=0:                    #
  print("We have liftoff! in " + str(countdown));countdown -=1   #  the -=1 is used to represent subtraction

countdown = 10                 # counting from
while countdown >=0:            # counting to 
    print(countdown);countdown-=1      # using -=1 to repreent we are going down 1 on each loop 




# WHILE LOOPS - in lists 


ingredients = ["milk", "sugar", "vanilla extract", "dough", "chocolate"]
length = len(ingredients)     # we are using a while (indefinite loop) so it needs to know the length of the list
countdown = 0              # we are starting our  count at 0

while countdown < length:    # we are comparing our countdown variable to the to length of ingredients
    print(ingredients[countdown]);countdown+=1  #this prints out the actual words of the index as opposed to the numbers
#    print(countdown); countdown+=1           # This counts the 4 indexes of the list


python_topics = ["variables", "control flow", "loops", "modules", "classes"]  # we have a list of statements
length = len(python_topics)   # ascertaining the length of python topics
index = 0                     # index counter is starting at 0
while index < length:         # while 0 is less than 4
  print(" I am learning about " + python_topics[index]); index+=1    # the +=1 stops it form being an infiite loop as we are going from adding starting from 0 to 4 as specified above 





# loop control (Break) statement

dog_breeds_available_for_adoption = ["french_bulldog", "dalmatian", "shihtzu", "poodle", "collie"]
dog_breed_I_want = "dalmatian"
list = len(dog_breeds_available_for_adoption)
index = 0

for i in dog_breeds_available_for_adoption:      # looped temp variable 
    print(i)                               # printing full list 
    if i == "dalmatian":                   #conditional to print a statement if dalmation is in list
        print("They have a " + i) 
        break                             # break to stop printing any futher items on the list 

#while index < list:
#    print(dog_breeds_available_for_adoption[index]); index+=1     #looping through the list of breeds




# loop control (Break) statement - finding a number in a list 

big_number_list = [1, 2, -1, 4, -5, 5, 2, -9]

for i in big_number_list:
    print(i)
    if i == -5:
        print("The number I was looking for was " + str(i))
        break
        
        
        
        
        
# Loop control: continue (opposite to break)
big_number_list = [1, 2, -1, 4, -5, 5, 2, -9]

for number in big_number_list:
    if number <=1:                           # chained conditional statement 
        continue                             #continue to loop all numbers less than or equal to 1
    print(number)                            #indentation has to be correct on this 



# Nested Loops and lists

project_teams = [["Ava", "Samantha", "James"], ["Lucille", "Zed"], ["Edgar", "Gabriel"]]

for i in project_teams:
    #    print(i)                         This would print the project in its obvious list format
    for ii in i:
        print("In this list we have the following students " + ii)                          #the nested loop prints each individual element of the list
        
        

sales_data = [[12, 17, 22], [2, 10, 3], [5, 12, 13]]

scoops_sold = 0

for i in sales_data:
    #    print(i)                                  This will print the list in its full form as sales data - not what we want if we want to add each part together 
    for ii in i:                                   # nested loop breaks the amounts down into individual amounts 
        scoops_sold += ii                          # we are adding the total value of sales data to the loop

print("The sales data shows the following sales data " + str(sales_data) + "\nThis means that the total number of scoops sold was: " + str(scoops_sold))





# List comprehensions (using loops in a list)

grades = [90, 88, 62, 76, 74, 89, 48, 57]
scaled_grades = [scaled * 10 for scaled in grades]     # temporary variable * X for temporary variable in variable we want to loop through

print(scaled_grades)

numbers = [2, -1, 79, 33, -45]
doubled = [num * 5 for num in numbers]
print(doubled)



# List Comprehensions: Conditionals & loops in a list

numbers = [2, -1, 79, 33, -45]
only_negative_doubled = []

for num in numbers:
    if num >=34:
        only_negative_doubled.append(num * 2)
print(only_negative_doubled)



# List Comprehensions: Conditionals & loops in a list

heights = [161, 164, 156, 144, 158, 170, 163, 163, 157]
can_ride_coaster = [x for x in heights if x>161]                  # printing all heights above 161
print(can_ride_coaster)



# adding squares and cubed value to existing lists from the single digit list 

single_digits = [0,1,2,3,4,5,6,7,8,9]
squares = []
cubes = []

for i in single_digits:
    print(i)
    squares.append(i **2)
    cubes.append(i **3)

print(squares)
print(cubes)




my_list = [1, 2, 3, 4, 5, 6, 7, 100, 110, 21, 33, 32, 2, 4]
# using modulus operator to give us all ODD numbers i.e. so when the number is divided by 2 we have 1 left
odd = []
for number in my_list:
    if number % 2 == 1:
        odd.append(number)
print(odd)

# using modulus operator to give us all EVEN numbers i.e. so when the number is divided by 2 we have 0 left
even = []
for i in my_list:
    if i % 2 == 0:
        even.append(i)
print(even)
