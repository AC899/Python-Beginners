# Positional arguments: when you call arguments by their position in a function

def house(blue_door,red_door):
    print(blue_door,red_door)
house("blue door","red door")


# Keyword arguments =
def house(blue_door,red_door):            # blue door / red door order in the function
    print(red_door, blue_door)
house(red_door = "red", blue_door = "blue")      # the arguments are in reverse order to the above funciton call


# Default arguments
def house(blue_door = "blue", red_door = "red"):     # assigning default values to the parameters
    print(blue_door, red_door)
house()                                           # can call the function without any arguments



#Function call to add argument straight into a dictionary 

tables = {
  1: ['Jiho', False],
  2: [],
  3: [],
  4: [],
  5: [],
  6: [],
  7: [],
}
print(tables)

#
def assign_table(table_number,name,vip_status = False):   #we are adding table_number as key and name,vip_status as the value
    tables[table_number] = [name,vip_status]   #dictionaryname[functionargumentUSEDFORKEY] = [INSERT VALUE, INSERT VALUE]


assign_table(6,"Yoni",False)    #positional argument i.e. working through the function arguments in order table number / name / vip_status
assign_table(4,"Karla")          #positional argument 2 we can set VIP status to false by default (see function argument above) we don't need to change or input in the future

assign_table(name="Martha", table_number=3, vip_status=True)    #keyword argument

print(tables)





# combining the * unpacking operator to cut sentences off at a particular index
tables = {
  1: {
    'name': 'Jiho',
    'vip_status': False,
    'order': 'Orange Juice, Apple Juice'
  },
  2: {},
  3: {},
  4: {},
  5: {},
  6: {},
  7: {},
}
print(tables)

def assign_table(table_number, name, vip_status=False):
  tables[table_number]['name'] = name
  tables[table_number]['vip_status'] = vip_status
  tables[table_number]['order'] = ''     #nested keys

# Write your code below:

def assign_and_print_order(table_number, *order_items):
  tables[table_number]['order'] = order_items
  for i in order_items:
    print(i)


assign_table(2, "Arwa", True)

assign_and_print_order(2, 'Steak', 'Seabass', 'Wine Bottle')
print(tables)










#Unpacking operator in a function argument = *
def print_order(*order_items):        # * allows us to send multiple arguments to the function
    print(order_items)

#print_order(1+2+3,3, "Jmes")        #the unpacking operator returns a tuple (not a list) - unchangeable
print_order("Orange Juice", "Apple Juice", "Scrambled Eggs", "Pancakes")




# args = NON KEYWORD arguments - these are strings in the example below 
# building a print statement for everything entered into the function
def shout_strings(*args):        # use the unpacking operator in the function argument call
    for i in args:               # looping through args
        print(i.lower())           # this is to print in lower case i.e. .lower(). To print normally we take away the paranthesis
shout_strings('Working on', 'learning', 'argument unpacking!')





# combining the * unpacking operator to cut sentences off at a particular index
def truncate_sentences(length, *sentences):       # accepting two parameters: number for length and multiple args for sentences
    for sentence in sentences:                      #looping through the args
        print(sentence[:length])                   #printing looped tuple created by args - slicing with the length argument

truncate_sentences(4, "ASasss", "ASas")




