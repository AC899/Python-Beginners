# Positional arguments: when you call arguments by their position in a function

def house(blue_door,red_door):
    print(blue_door,red_door)
house("blue door","red door")


# Keyword arguments =
def house(blue_door,red_door):            # blue door / red door order in the function
    print(red_door, blue_door)
house(red_door = "red", blue_door = "blue")      # the arguments are in reverse order to the above funciton call


# Default arguments
def house(blue_door = "blue", red_door = "red"):     # assigning default values to the parameters
    print(blue_door, red_door)
house()                                           # can call the function without any arguments



#Function call to add argument straight into a dictionary 

tables = {
  1: ['Jiho', False],
  2: [],
  3: [],
  4: [],
  5: [],
  6: [],
  7: [],
}
print(tables)

#
def assign_table(table_number,name,vip_status = False):   #we are adding table_number as key and name,vip_status as the value
    tables[table_number] = [name,vip_status]   #dictionaryname[functionargumentUSEDFORKEY] = [INSERT VALUE, INSERT VALUE]


assign_table(6,"Yoni",False)    #positional argument i.e. working through the function arguments in order table number / name / vip_status
assign_table(4,"Karla")          #positional argument 2 we can set VIP status to false by default (see function argument above) we don't need to change or input in the future

assign_table(name="Martha", table_number=3, vip_status=True)    #keyword argument

print(tables)




#Unpacking operator in a function argument = *
def print_order(*order_items):        # * allows us to send multiple arguments to the function
    print(order_items)

#print_order(1+2+3,3, "Jmes")        #the unpacking operator returns a tuple (not a list) - unchangeable
print_order("Orange Juice", "Apple Juice", "Scrambled Eggs", "Pancakes")
