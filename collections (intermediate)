#dequ containers are an alternative to lists where storing and modify large amounts of information is necessesayr
#dictionaries are great for storing data - deques are optimised for appending and popping data to the front and back


from collections import deque

# csv data read from a function that is not defined in the body of the challenge
csv_data = process_csv_supplies()[1:]

# Here is a sample of 2 elements in csv_data:
# [ ['nylon', '10', 'unimportant'], ['wool', '1', 'important'] ]

# Write your code below!
supplies_deque = deque()  # empty supplies deque

for i in csv_data:
    if i[2] == 'important':
        supplies_deque.appendleft(tuple(row))
    else:
        supplies_deque.append(tuple(row))

print(supplies_deque)

ordered_important_supplies = deque()
for i in range(25):   #creating a loop that grabs the first 25 elements of supplies deque and appends to our new deque
      ordered_important_supplies.append(supplies_deque.popleft())  #




#collections 

from collections import UserString
str_name = 'python powered patterned products'
str_word = 'patterned'

# Write your code below!

# Checkpoint #1
class SubtractString(UserString):

    def __sub__(self, other):# method defined for substituting elements of self with other 
        if other in self.data:  #if other in self
            self.data = self.data.replace(other, '')  #replacing the term that was in other which is now found in self with an empty string ... if strname was 'moose' it would print the full str_name because moose is not in other so it would not replace an instance of it in strname to become an empty string 

# Checkpoint #2
subtract_string = SubtractString(str_name)  #newobject = instanceofclass(argument) 
subtract_string - str_word    #specifying the minus the value for 'other' 
print(subtract_string)

