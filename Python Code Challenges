# radians to degrees converter function with user input - simple 

import time
import math

greeting = input("What is your name ? ")
time.sleep(1)
print("Hello, " + greeting)
time.sleep(1)
radian = int(input("Please input the number of radians you wish to convert into degrees : "))
originalradian = radian     # saving the original amount they input as a variable so it can be replicated before being calculated - see below

def conversion(radian):                  #radian is the variable with our user input so we assign it as the input on our function i.e. so the number they enter becomes is calculated through the function
    pi_value = math.pi                   #
    degree = (radian*180)/pi_value
    return degree

print("The result of converting " + str(originalradian) + " radians into degrees is: " + str(conversion(radian)))



# Converting intergers into binary numbers 
question = int(input("Enter the number you want to convert into a binary figure : "))   # we are taking interger inputs (not floats i.e. it will crash if you type .5) E
original_question = question

def int_to_binary(question):            #  function to covnert interger values to binaries which takes the input from the variable question and calculates binary off the back of it
    binary = bin(question)
    return binary

print("The original value you entered was " + str(original_question) + "\n The corresponding binary value of that interger is: " + str((int_to_binary(question))))



# checking for vowels and constants in a word (based on user input) 

vowels = "AaEeIiOoUu"
constants = "bBcCdDfFgGhHjJkKlLmMnNpPqQRsStTvVwWxXyYzZ"
word = input("Type in a word to check out the amount of vowels it has : ")

def vowels_checker(word, vowels):                           #we created a separate function for vowel checking
    vowel_loop = [each for each in word if each in vowels]  #each are temp variables looped through our word with the conditional if each that now comprises of the word is in vowels. Confusing.
    amount = len(vowel_loop)                                #we are looking for the amount i.e. in an interger of times the vowels have came up in the word and are looking to return accordingly
    return amount

def constant_checker(word, constants):                    #we created a separate function for constant checking
    constant_loop = [each2 for each2 in word if each2 in constants]      #we are looping temp variables again
    amount2 = len(constant_loop)
    return amount2

print("The word you choose is : " + word)
print("The amount of vowels in your word is " + str(vowels_checker(word, vowels)) + "\nThe amount of constants in your word is " + str(constant_checker(word, constants)))






# credit card user input exercise where we are returning the last 4 digits of a card 

credit_card_number = input("Please input your credit card number: ")       # asking user for their input

list_credit_card_number = []                         # empty list for credit card number in the first instance
for number in credit_card_number:                    # we are looping temporary variable in the credit card input and appending it to our empty list above
    list_credit_card_number.append(number)

indexed_card_number = (list_credit_card_number[-1::-5])         #created a new variable to slice the list that we created above (as we only want to show the last four digits
censored = (" " . join(indexed_card_number))                    #IMPORTANT the " " allowed me to remove the brackets and commas from the list and print just the numbers of the card

if len(credit_card_number) >16:                                   #Conditional statements for when the card is over and below 16 characters long
    print("Error ! Only 16 characters allowed!")
elif len(credit_card_number) <15:
    print("You need 16 digits for a calid credit card where as you have only entered:" + (str(len(credit_card_number))))
else:print("The digits of your credit card number are as follows: **** **** **** **** " + (censored))







# COUNTING OS AND XS IN a string 

string = input("The string I want to enter into the computer is: ")
time.sleep(1)

x = 'xX'
o = 'oO'

def function_O(string,o):                                  # function to catch the o 
    o_loop = [each for each in string if each in o]         #we are looping temporary variables in the string entered to see if they match with the values defined in variable o 
    amount = len(o_loop)
    return amount

def function_1(string,x):                                # function to catch the x 
    x_loop = [each2 for each2 in string if each2 in x]   #we are looping temporary variables in the string entered to see if they match with the values defined in variable x
    amount2 = len(x_loop)                                #if we just print x_loop it'll print out the number of xs in the word - we are using len to convert the amount of xs into a number which we will show to the user below 
    return amount2

print("The word you chose was: " + string)
print("The 'O/o' count is as follows: " + str(function_O(string,o)) + "\nThe X/x count is as follows: " + str(function_1(string,x)))






# function to calculate fixed 20% discount on an item 

full_price = int(input("Enter your number:"))

def discount(full_price):
    first_price = 0.20 * full_price
    final_price = full_price - first_price
    return final_price

print("your total price including discount for that item is : " + str((discount(full_price))))




# Function to cut all of the strings out of an input and only leave the intergers behind 

string = input("Enter your word")

def function(string):
    strings = string.strip('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
    return strings

print(function(string))





#doubling up the letters in a word i.e. so a string input of argh becomes aarrgghh

string = input("Type in your poisionous turd word")

def strings(string):
    amended = "".join([x*2 for x in string])
    return amended

print(strings(string))





#counting letters in words BUT doesn't make a distinction between upper and lower case letters 

from collections import Counter

# string = input"Enter the letter you want to count the unique values for: "
#print("The letter you entered was: " + string)      loop through letter in letters

def countDis(str):
    # Stores all frequencies
    freq = Counter(str)
    # Return the size of the freq dictionary
    return len(freq)

print(countDis("AaAa"))





#Input for strings and intergers BUT only returns the numbers you put in .... various methods 

import re

def removing_letters(string):
    pattern = '([^ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz])'
    str_ = string
    no_vowel_list = re.findall(pattern, str_)                #re.findall(searching to exclude words specified in the pattern that are found in the string and return result as a list )
    censored = (",".join(no_vowel_list))                     #converting list made by re into a non list looking readable format i.e. we can we swap out the space for a comma or : etc
    return censored

print(removing_letters("9s8afasf9safas2235"))





# badly shit dice game 
numberrandom1 = random.randint(1, 6)
numberrandom2 = random.randint(1, 6)
combined = numberrandom1 + numberrandom2
dice1= print(numberrandom1)
dice2 = print(numberrandom2)
count = 0

if combined ==12:
    count +=1
    print("You rolled two sixes - you win.\n It took you " + str(count) + " throws of the dice.")
else:
    False







# Game. Neat. Roll 12 on the dice
player1_score = 0
player2_score = 0

# creating a loop - allows us to roll 10 times when we put the player values in the loop. 
for i in range(10):

    # I did the same thing in mine. We are just generating random intergers.  
    player1_value = random.randint(1, 6)
    player2_value = random.randint(1, 6)

    # Display the values
    print("Player 1 rolled: ", player1_value)
    print("Player 2 rolled: ", player2_value)

    # Selection: based on comparison of the values, take the appropriate path through the code.
    if player1_value > player2_value:
        print("player 1 wins.")
        player1_score = player1_score + 1  # This is how we increment a variable
    elif player2_value > player1_value:
        print("player 2 wins")
        player2_score = player2_score + 1
    else:
        print("It's a draw")

    input("Press enter to continue.")  # Wait for user input to proceed.

print("### Game Over ###")
print("Player 1 score:", player1_score)
print("Player 2 score:", player2_score)






#   Simple question game with counter 

count = 0

while True:  # looping the question below continuously
    question1 = int(input("What is the capital of UK ? \n1.London\n2.Brighton\n3.Birmingham"))
    if question1 == 1:
        count += 1  # add 1 to the score counter above (set to 0)
        print("Congratulations you got the correct answer\nYour score is now " + str(count))
        break  # loop is broken if answer to question 1 equals 1 (the correct answer)

while True:
    question2 = int(input("What is the capital of Germany ? \n1.Berlin\n2.Brighton\n3.Birmingham"))
    if question2 == 1:
        count += 1
        print("Congratulations you got the correct answer\nYour score is now " + str(count))
        break  # loop is broken if answer to question 1 equals 1 (the correct answer)


#splitting numbers from characters. 

def splitting(question1):
    only_numbers = ''.join([loop for loop in question1 if not loop.isalpha()])
    only_letters = ''.join([i for i in question1 if not i.isdigit()])    #LOOP to remove all digits from the string
    print("The letters in your string are: " + only_letters)
    print("The numbers in your string are: " + only_numbers)

print(splitting("123absafsasfaf22"))






initial_letter = input("Enter your letter: ")
#spfunction to take away points / length of initial letter needs to be the total amount of points and we do a count =-1
#while loop to break at the end of length of the letter for guesses / if conditionals for characters in initial letter


# countdown for number of attempts left to guess the correct letter
countdown = len(initial_letter)


i = 0
while i <= countdown:
    i +=1
    print(i)

# function to loop through each character of the entered word and make a list
chars = []
for i in initial_letter:
    chars.append(i)

# if guessed guess input is equal to initial letter then count +=1 / while loop to end all attempts at



#splitting all the letters and numbers from the input
only_letters = ''.join([i for i in initial_letter if not i.isdigit()])    #LOOP to remove all letters from the string
only_numbers = ''.join([loop for loop in initial_letter if not loop.isalpha()]) #LOOP to remove all digits from the string




# function to return the middle character of any inputted string
def mid(string):
    if len(string) %2 ==0:                    #if length of the string is even we are printing "" i.e. blank as there is no middle 
        print("")
    else:
        offset = int(len(string) / 2)          #defined the halfway point of the string 
        return string[offset: offset + 1]     # returned the stringhalfwaypoint BUT added 1 because the index of teh string starts at 0 and the length does not 

print(mid("Hell"))






#function to return the people who are online taking a dictionary as an input

def online_count(dictionary):
    for key,value in dictionary.items():
        if value == 'online':
            print(key,value)


print(online_count({
    "Alice": "online",
    "Bob": "offline",
    "Eve": "online",
}))





#checking variable types using isinstance(variable, int/string)
#useful if we want to find out if the variable is a number or string

def only_ints(x,y):
    if isinstance(x, int) == True and isinstance(y, int) ==True:   #is is true that x and y are intergers 
        return True  #return True 
    else:
        return False
print(only_ints(2,3))



#converting a string into a list and joining all characters with a full stop 

def add_dots(string):
    new = list(string)        #type list(string we want to convert into a list) to get a break down of every character
    final = '.'.join(new)    #the above list is currently split out as [h,e,l,l,o] = we use '.' join to put them all together with full stops
    return final

print(add_dots("hello"))




#anagram locator script for python 

def is_anagram(string1, string2):
    list1 = list(string1)            #converting both strings into lists
    list2 = list(string2)

    list1.sort()         #sorting in alphabetical order
    list2.sort()

    if list1 == list2:         #now the strings are sorted in the exact same way they should be identical i.e. an anagram so if not = false 
        return True
    else:
        return False

print(is_anagram("typhoon", "opython"))





#flattening lists - taking multiple lists and converting them into ibe kusts
#list comprehension - creating a new list balued on the balues of an existing list 

def flatten(word):
    new = [item for item2 in word for item in item2]    #Method 1: list comprehension - temp variable for temp2 variable in variable for temp variable in temp2variable
    return new

print(flatten([[1, 2], [3, 4]]))





#creating a function to take away the largest number from the smallest in any given list

def largest_difference(list):
    list.sort()                 #sort the list by numerical order
    difference = list[-1] - list[0]  #as the list is now sorted we take the index(highest -1) and index lowest (0) and subtract them
    return difference

print(largest_difference([1, 2, 3,6]))





# defining a function that takes one input / returns two numbers (one less than the input and one higher)

def up_down(x):
    original = x                #saving the original interger as original variable
    x_updated = x -1            #adding 1 to x for the first return
    y_updated = original + 1    #subtracting 1 from x for the second return
    thistuple = (x_updated , y_updated)       #saving both to a tuple to be returned
    return thistuple

print(up_down(6))
#def up_down(x):    A WAY TO DO THE ABOVE IN ONE LINE OF CODE - LOL 
    #return (x-1, x+1)




#counting a string with the highest number of zeros

def consecutive_zeros(x):    
    split = x.split('1')     #splitting the 1st out of the string 
    split.sort()            #sorting the 0s left from smallest to largest in the below string i.e. 0 00 000
    return split[-1]        #return the final index from split (the biggest number of zeros as we have sorted from lowest to highest) 


print(consecutive_zeros("1001101000110"))





# simple boolean challenge 
def triple_and(x,y,z):
    if x == True and y == True and z == True:
        return True
    else:
        return False





#converting a list of intergers into a string 

def convert(list):
    converter = str(list)
    return converter

print(str(convert([1, 2, 3])))





#converting a list of intergers into a string

def convert(list):
    new = ''.join(map(str,list))    #the join function brings elements of the list into a string format 
    return new

print(convert(([1, 2, 3])))




#function to zip two lists together 
def zipper(a,b):
    zipped = zip(a,b)              #zipping lists a and b togetehr
    final = list(zipped)            # neeed to save the result as a list otherwise it only prints object
    return final

print(zipper([1,2,3,4], [1,2,3,4,5]))      #Note if we have an uneven amount of numbers on the lists it doesn't print the uneven one 





#returning number of arguments placed in a function - args allows multiple positional arguments
def param_count(*args):
    return len(args)

print(param_count(2, 3, 4,3,4, "arg"))






# function that doesn't accept negative numbers as inputs and automatically adds commas to interger inputs

def format_number(x):
    if x >=0:
        number_with_commas = "{:,}".format(x)     #adding commas to an interger
        print(number_with_commas)
    else:
        return False

print(format_number(10000))






# adding a string as a value and the length of that string as the key 

def word_length_dictionary(string):
    word_lengths = {}    #empty dictionary
    for word in string:                   #looping word in string
        word_lengths[word] = len(word)    #adding to the dictionary: dictionaryname[word] i.e. the string we are adding = value (len)word i.e. the amount of letters in teh word is being passed through as the value 
    return word_lengths

print(word_length_dictionary(["apple", "dog", "cat"]))



#printing all on teh same line 
max = "Masc"
for i in max:
    print(i,end="")    #printing all on the same line / modifying a print statement 
